# -*- coding: utf-8 -*-
"""Drugs_Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gvFwsoEgbJT4hlvm0ivKWZws6POPPbpz

## 1. Problem Statement

#### Classification of Drug based on Age, Gender, Blood pressure, Cholesterol and Na_to_K.
"""

import pandas as pd
import numpy as np
import re
import matplotlib.pyplot as plt
import seaborn as sns
import sklearn
from sklearn.preprocessing import LabelEncoder
import scipy.stats as ss
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import PowerTransformer,FunctionTransformer,LabelEncoder,OneHotEncoder,OrdinalEncoder,StandardScaler
from mixed_naive_bayes import MixedNB
from sklearn.metrics import accuracy_score,confusion_matrix,precision_score,recall_score,f1_score,classification_report
import random
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline,make_pipeline
import pickle
from sklearn.impute import SimpleImputer
import streamlit as st

#"""## 2. Data Collection or Data Gathering"""

data = pd.read_csv(r"E:\projects\drug200.csv")

df = data.copy()

#df.head()

#"""## 3. Basic EDA"""

#df.shape

#df.info()

#df.isnull().sum()

#df.duplicated().sum()

#df['Drug'].value_counts()

#df['BP'].unique()

#df['Cholesterol'].unique()

#df.describe()

#df['Sex'].unique()

df = df.astype(dtype = {'BP': 'category','Cholesterol':'category'})

#df.info()

#df.columns #this columns are showing in streamlit so, beware

#"""## 4. Data Pre-Processing"""

feature_var = df[['Age', 'Sex', 'BP', 'Cholesterol', 'Na_to_K']]

#feature_var.head()

class_var = df['Drug']

#class_var.head()

x_train, x_test, y_train, y_test = train_test_split(feature_var, class_var, test_size= 0.20, random_state= 1, stratify= class_var)

#x_train.head()

#eda_df = pd.concat([x_train,y_train], axis= 1)

#eda_df.head()

#"""## 5. EDA"""


#"""## 6. Fearure Extraction"""

class_var_encoding = LabelEncoder()

y_train = class_var_encoding.fit_transform(y_train)

y_train = pd.Series(y_train)

y_test = class_var_encoding.transform(y_test)

y_test = pd.Series(y_test)

#x_train.info()

numerical_data = x_train.select_dtypes(include= ['int64','float64'])

nominal_data = x_train.select_dtypes(include= ['object'])

ordinal_data = x_train.select_dtypes(include= ['category'])

numerical_pipe = Pipeline([('Null_values_imputation_1', SimpleImputer(strategy='mean')),
                           ('StandardScalar', StandardScaler()),
                           ('Power_Transform',PowerTransformer())])

nominal_pipe = Pipeline([('Null_values_imputation_2', SimpleImputer(strategy='most_frequent')),
                         ('OH_Encoding', OneHotEncoder(sparse_output= False,drop= 'first'))])

ordinal_pipe = Pipeline([('Null_values_imputation_2', SimpleImputer(strategy='most_frequent')),
                         ('Ordinal_Encoding', OrdinalEncoder(categories= [['NORMAL','LOW','HIGH'],['NORMAL','HIGH']]))])

prepro_col_trans = ColumnTransformer(transformers= [('Ordinal_Pre-Processing', ordinal_pipe, ordinal_data.columns),
                                                    ('Nominal_Pre-Processing', nominal_pipe, nominal_data.columns),
                                                    ('numerical_Pre-Processing', numerical_pipe, numerical_data.columns)],
                                     remainder="passthrough")

feature_extraction_pipe = Pipeline([('Pre-Processing',prepro_col_trans)])

final_x_train = feature_extraction_pipe.fit_transform(x_train)

final_x_test = feature_extraction_pipe.transform(x_test)

#feature_extraction_pipe.get_feature_names_out()

#"""## 7. Training"""

mixed_nb = MixedNB(categorical_features= [0,1,2])
model = mixed_nb.fit(final_x_train, y_train)

#print(classification_report(y_test, model.predict(final_x_test)))

pickle.dump(feature_extraction_pipe, open(r'E:\projects\Drug_feature_extraction.pkl','wb'))

pickle.dump(model, open(r"E:\projects\Drug_model.pkl", 'wb'))


preprocesser=pickle.load(open(r"E:\projects\Drug_feature_extraction.pkl","rb"))
model=pickle.load(open(r"E:\projects\Drug_model.pkl","rb"))

st.title('Classification of Drugs')

age = st.slider('Enter age',min_value= 1,max_value=100)
sex = st.radio('Select Gender',['Male','Female'])
bp = st.radio('Select BP',['HIGH','LOW','NORMAL'])
cholesterol = st.radio('Select cholesterol',['HIGH','NORMAL'])
na_to_k = st.slider('Enter Na_to_K level',min_value= 0.0,max_value= 40.0, step= 0.001)

if sex == 'Male':
    sex = 'M'
else:
    sex = 'F'

query = pd.DataFrame([[age,sex,bp,cholesterol,na_to_k]],
                  columns= ['Age', 'Sex', 'BP', 'Cholesterol', 'Na_to_K'])

pred = preprocesser.transform(query)

res = model.predict(pred)

#q=preprocesser.transform([[age,sex,bp,cholesterol,na_to_k]])
#res=model.predict(q)




if res == 0:
    res = "DrugY"
elif res == 1:
    res = "drugA"
elif res == 2:
    res = "drugB"
elif res == 3:
    res = "drugC"
else:
    res = "drugX"

if st.button('Submit'):
    st.header(res)

